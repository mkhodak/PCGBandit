/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//Detailed explanation of parameters can be found at : https://www.openfoam.com/documentation/user-guide/6-solving/6.1-time-and-data-inputoutput-control

application     epotMultiRegionInterFoam;

startFrom       startTime; //startTime  // firstTime // latestTime (choosing latest time allows us to resume the simulation from the last written time-step.)

startTime       0; //start time of the simulation 

stopAt          endTime; // writeNow // nextWrite

endTime         0.025;// Run the simulation up to this simulation time in seconds

deltaT          1e-6; //Initial time-step

writeControl    adjustable; // runTime // clockTime // cpuTime //adjustableRunTime

writeInterval   1e-5; //how often (in seconds) will native openFOAM simulation data is written

purgeWrite      2; //Keep only the last two time-steps. This is useful for saving disk space.

writeFormat     binary; // ascii //binary   format of openFOAM output. 

writePrecision  8; // decimal percision of written data (6 by default)

writeCompression off; // on, off

timeFormat      general; // fixed // scientific

timePrecision   6;

runTimeModifiable yes; //allow OpenFOAM to detect changes to files and update parameters in run-time

adjustTimeStep  on; //off , adaptive time-stepping

maxCo           0.4; //Maximum Courant number allowed
maxAlphaCo      0.3; //Maximum Courant number in interface cells

maxDeltaT       1e-5; //Maximum allowed time-step regardless of maxCo/maxAlphaCo number

// Maximum diffusion number
maxDi           1e10; //irrelevant, set to a large value

BtStartTime 0; //Start time of ramp-up of magnetic field
BtDuration 1e-3; //Duration of magnetic field ramp-up. Set both BtStartTime and BtDuration to 0 for disabling magnetic field ramp-up

JConservativeForm true; //whether or not to use the conservative formulation for J. Recommend to keep it as true.



//Choosing the collated file handler enables writing (num. of time-steps * num. of fields) files , instead of (num. time-steps *number of fields* number of processors) files
OptimisationSwitches
{
    //- Parallel IO file handler
    // uncollated (default), collated or masterUncollated
    fileHandler collated;

    //- collated: thread buffer size for queued file writes.
    // If set to 0 or not sufficient for the file size threading is not used.
    // Default: 2e9
    maxThreadFileBufferSize 2e9;

    //- masterUncollated: non-blocking buffer size.
    // If the file exceeds this buffer size scheduled transfer is used.
    // Default: 2e9
    //maxMasterFileBufferSize 2e9;
}

//Write the maximum velocity in the solver output each time-step, useful for troubleshooting and detecting crash precursors
functions
{
    minMax
    {
        type          fieldMinMax;
        libs          (fieldFunctionObjects);
        writeControl  timeStep; //writeTime;
        fields        (U);
        log             true;
        region          liquid;
    }

}

functions 
{ 
	
	/* 
	 * For convenience, write vtk files of chosen regions/fields instead as the simulation progresses instead of 
	 * having to run the reconstructPar utility separately to obtain VTK files
	 */
	  
	vtkWrite 
	{
		type    vtkWrite;
		libs    (utilityFunctionObjects);
		log     true;


		timeStart 0;
		writeControl       runTime;
		writeInterval      100;

		boundary    true;

		interpolate true;

		fields  (U alpha.liquidMetal J JxB B0 p p_rgh potE);
		
		// format  ascii;

		// Region of interest
		regions (liquid solidWalls insulator);


		// Write cell ids as field - Default=true
		writeIds    true;
	}


}


// ************************************************************************* //
