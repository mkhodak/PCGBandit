/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.0                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      codeDict;
}

outletUxB
{
    codeInclude
    #{
        #include "scalar.H"
        #include "fvCFD.H"
        #include "mappedPatchBase.H"
        #include "fvPatchFieldMapper.H"
        #include "volFields.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    code
    #{
    
    //get this patch's mesh
    const fvMesh& mesh 	= patch().boundaryMesh().mesh();
    const label id 		= patch().index();
   
   //get mesh variable
    const volVectorField& Bmesh 	= mesh.lookupObject<volVectorField>("B");
    const volVectorField& Umesh 	= mesh.lookupObject<volVectorField>("U");
    const volScalarField& Phimesh 	= mesh.lookupObject<volScalarField>("potE");
    
    //get patch internal varialbe and delta
    const vectorField B      = Bmesh.boundaryField().boundaryInternalField()[id];
    const vectorField U      = Umesh.boundaryField().boundaryInternalField()[id];
    const scalarField phi    = Phimesh.boundaryField().boundaryInternalField()[id];
    const scalarField delta  = patch().deltaCoeffs();

    
    scalarField result(patch().size(), Zero);
    vectorField nf = patch().nf();
    
    forAll(result, i)
    {
		result[i] = phi[i]+((U[i]^B[i])&nf[i]/delta[i]);

	}
	
    
    operator==(result);
    
    
    #};
}
